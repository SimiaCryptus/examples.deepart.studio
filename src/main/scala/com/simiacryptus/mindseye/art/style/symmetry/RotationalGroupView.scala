package com.simiacryptus.mindseye.art.style.symmetry

import java.io.{ByteArrayInputStream, InputStreamReader}

import com.google.gson.GsonBuilder
import com.simiacryptus.mindseye.art.util.view.SphericalView

object RotationalGroupView {

  def dist(a: Array[Double], b: Array[Double]): Double = {
    rms(a.zip(b).map(t => t._1 - t._2))
  }

  def sum(a: Array[Double], b: Array[Double]): Array[Double] = {
    a.zip(b).map(t => t._1 + t._2)
  }

  def dot(a: Array[Double], b: Array[Double]): Double = {
    a.zip(b).map(t => t._1 * t._2).sum
  }

  def unitV(doubles: Array[Double]): Array[Double] = {
    val r = rms(doubles)
    doubles.map(_ / r)
  }

  def rms(doubles: Array[Double]): Double = {
    Math.sqrt(doubles.map(Math.pow(_, 2)).sum)
  }

  val TETRAHEDRON = 10
  val OCTOHEDRON = 22
  val ICOSOHEDRON = 60

}
import RotationalGroupView._

class RotationalGroupView(x: Double, y: Double, mode: Int) extends SphericalView(x, y) {

  protected val tileProbe = Array[Double](1, 0, 0)
  protected val vertexSeed = Array[Double](0, 0, 1)

  lazy val primaryTile: Array[Double] = {
//    val seeds = List(vertexSeed).toBuffer
//    while (seeds.size < 3) {
//      seeds ++= List(icosohedronMatrices.map(multiply(seeds.head, _)).sortBy(dot(_, tileProbe)).filter(p => seeds.map(dot(_, p)).min > 1e-3).head)
//    }
//    unitV(seeds.reduce((a, b) => sum(a, b)).map(_ / seeds.size))
    unitV(icosohedronMatrices.map(multiply(vertexSeed, _)).sortBy(dot(_, tileProbe)).take(3).reduce((a, b) => sum(a, b)).map(_ / 3))
  }

  def matrixData: String = {
    // See also https://mathandcode.com/2016/06/06/polyhedramathematica.html
    mode match {
      case TETRAHEDRON =>
        """
          |[[[-1., 0., 0.], [0., -1., 0.], [0., 0., 1.]],
          | [[-0.5, -0.5, -0.70711], [0.5, 0.5, -0.70711], [0.70711, -0.70711, 0.]],
          | [[-0.5, -0.5, 0.70711], [0.5, 0.5, 0.70711], [-0.70711, 0.70711, 0.]],
          | [[-0.5, 0.5, -0.70711], [-0.5, 0.5, 0.70711], [0.70711, 0.70711, 0.]],
          | [[-0.5, 0.5, 0.70711], [-0.5, 0.5, -0.70711], [-0.70711, -0.70711, 0.]],
          | [[0., -1., 0.], [-1., 0., 0.], [0., 0., -1.]],
          | [[0., 1., 0.], [1., 0., 0.], [0., 0., -1.]],
          | [[0.5, -0.5, -0.70711], [0.5, -0.5, 0.70711], [-0.70711, -0.70711, 0.]],
          | [[0.5, -0.5, 0.70711], [0.5, -0.5, -0.70711], [0.70711, 0.70711, 0.]],
          | [[0.5, 0.5, -0.70711], [-0.5, -0.5, -0.70711], [-0.70711, 0.70711, 0.]],
          | [[0.5, 0.5, 0.70711], [-0.5, -0.5, 0.70711], [0.70711, -0.70711, 0.]],
          | [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]]
          |""".stripMargin
      case OCTOHEDRON =>
        """
          |[[[-1., 0., 0.], [0., -1., 0.], [0., 0., 1.]],
          | [[-1., 0., 0.], [0., 0., -1.], [0., -1., 0.]],
          | [[-1., 0., 0.], [0., 0., 1.], [0., 1., 0.]],
          | [[-1., 0., 0.], [0., 1., 0.], [0., 0., -1.]],
          | [[0., -1., 0.], [-1., 0., 0.], [0., 0., -1.]],
          | [[0., -1., 0.], [0., 0., -1.], [1., 0., 0.]],
          | [[0., -1., 0.], [0., 0., 1.], [-1., 0., 0.]],
          | [[0., -1., 0.], [1., 0., 0.], [0., 0., 1.]],
          | [[0., 0., -1.], [-1., 0., 0.], [0., 1., 0.]],
          | [[0., 0., -1.], [0., -1., 0.], [-1., 0., 0.]],
          | [[0., 0., -1.], [0., 1., 0.], [1., 0., 0.]],
          | [[0., 0., -1.], [1., 0., 0.], [0., -1., 0.]],
          | [[0., 0., 1.], [-1., 0., 0.], [0., -1., 0.]],
          | [[0., 0., 1.], [0., -1., 0.], [1., 0., 0.]],
          | [[0., 0., 1.], [0., 1., 0.], [-1., 0., 0.]],
          | [[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]],
          | [[0., 1., 0.], [-1., 0., 0.], [0., 0., 1.]],
          | [[0., 1., 0.], [0., 0., -1.], [-1., 0., 0.]],
          | [[0., 1., 0.], [0., 0., 1.], [1., 0., 0.]],
          | [[0., 1., 0.], [1., 0., 0.], [0., 0., -1.]],
          | [[1., 0., 0.], [0., -1., 0.], [0., 0., -1.]],
          | [[1., 0., 0.], [0., 0., -1.], [0., 1., 0.]],
          | [[1., 0., 0.], [0., 0., 1.], [0., -1., 0.]],
          | [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]]
          |""".stripMargin
      case ICOSOHEDRON =>
        """[[[-1., 0., 0.], [0., -1., 0.], [0., 0., 1.]],
          | [[-1., 0., 0.], [0., 1., 0.], [0., 0., -1.]],
          | [[-0.5, -0.80902, -0.30902], [-0.80902, 0.30902, 0.5], [-0.30902, 0.5, -0.80902]],
          | [[-0.5, -0.80902, -0.30902], [0.80902, -0.30902, -0.5], [0.30902, -0.5, 0.80902]],
          | [[-0.5, -0.80902, 0.30902], [-0.80902, 0.30902, -0.5], [0.30902, -0.5, -0.80902]],
          | [[-0.5, -0.80902, 0.30902], [0.80902, -0.30902, 0.5], [-0.30902, 0.5, 0.80902]],
          | [[-0.5, 0.80902, -0.30902], [-0.80902, -0.30902, 0.5], [0.30902, 0.5, 0.80902]],
          | [[-0.5, 0.80902, -0.30902], [0.80902, 0.30902, -0.5], [-0.30902, -0.5, -0.80902]],
          | [[-0.5, 0.80902, 0.30902], [-0.80902, -0.30902, -0.5], [-0.30902, -0.5, 0.80902]],
          | [[-0.5, 0.80902, 0.30902], [0.80902, 0.30902, 0.5], [0.30902, 0.5, -0.80902]],
          | [[0., -1., 0.], [0., 0., -1.], [1., 0., 0.]],
          | [[0., -1., 0.], [0., 0., 1.], [-1., 0., 0.]],
          | [[0., 0., -1.], [-1., 0., 0.], [0., 1., 0.]],
          | [[0., 0., -1.], [1., 0., 0.], [0., -1., 0.]],
          | [[0., 0., 1.], [-1., 0., 0.], [0., -1., 0.]],
          | [[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]],
          | [[0., 1., 0.], [0., 0., -1.], [-1., 0., 0.]],
          | [[0., 1., 0.], [0., 0., 1.], [1., 0., 0.]],
          | [[0.5, -0.80902, -0.30902], [-0.80902, -0.30902, -0.5], [0.30902, 0.5, -0.80902]],
          | [[0.5, -0.80902, -0.30902], [0.80902, 0.30902, 0.5], [-0.30902, -0.5, 0.80902]],
          | [[0.5, -0.80902, 0.30902], [-0.80902, -0.30902, 0.5], [-0.30902, -0.5, -0.80902]],
          | [[0.5, -0.80902, 0.30902], [0.80902, 0.30902, -0.5], [0.30902, 0.5, 0.80902]],
          | [[0.5, 0.80902, -0.30902], [-0.80902, 0.30902, -0.5], [-0.30902, 0.5, 0.80902]],
          | [[0.5, 0.80902, -0.30902], [0.80902, -0.30902, 0.5], [0.30902, -0.5, -0.80902]],
          | [[0.5, 0.80902, 0.30902], [-0.80902, 0.30902, 0.5], [0.30902, -0.5, 0.80902]],
          | [[0.5, 0.80902, 0.30902], [0.80902, -0.30902, -0.5], [-0.30902, 0.5, -0.80902]],
          | [[1., 0., 0.], [0., -1., 0.], [0., 0., -1.]],
          | [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]],
          | [[-0.80902, -0.30902, -0.5], [-0.30902, -0.5, 0.80902], [-0.5, 0.80902, 0.30902]],
          | [[-0.80902, -0.30902, -0.5], [0.30902, 0.5, -0.80902], [0.5, -0.80902, -0.30902]],
          | [[-0.80902, -0.30902, 0.5], [-0.30902, -0.5, -0.80902], [0.5, -0.80902, 0.30902]],
          | [[-0.80902, -0.30902, 0.5], [0.30902, 0.5, 0.80902], [-0.5, 0.80902, -0.30902]],
          | [[-0.80902, 0.30902, -0.5], [-0.30902, 0.5, 0.80902], [0.5, 0.80902, -0.30902]],
          | [[-0.80902, 0.30902, -0.5], [0.30902, -0.5, -0.80902], [-0.5, -0.80902, 0.30902]],
          | [[-0.80902, 0.30902, 0.5], [-0.30902, 0.5, -0.80902], [-0.5, -0.80902, -0.30902]],
          | [[-0.80902, 0.30902, 0.5], [0.30902, -0.5, 0.80902], [0.5, 0.80902, 0.30902]],
          | [[-0.30902, -0.5, -0.80902], [-0.5, 0.80902, -0.30902], [0.80902, 0.30902, -0.5]],
          | [[-0.30902, -0.5, -0.80902], [0.5, -0.80902, 0.30902], [-0.80902, -0.30902, 0.5]],
          | [[-0.30902, -0.5, 0.80902], [-0.5, 0.80902, 0.30902], [-0.80902, -0.30902, -0.5]],
          | [[-0.30902, -0.5, 0.80902], [0.5, -0.80902, -0.30902], [0.80902, 0.30902, 0.5]],
          | [[-0.30902, 0.5, -0.80902], [-0.5, -0.80902, -0.30902], [-0.80902, 0.30902, 0.5]],
          | [[-0.30902, 0.5, -0.80902], [0.5, 0.80902, 0.30902], [0.80902, -0.30902, -0.5]],
          | [[-0.30902, 0.5, 0.80902], [-0.5, -0.80902, 0.30902], [0.80902, -0.30902, 0.5]],
          | [[-0.30902, 0.5, 0.80902], [0.5, 0.80902, -0.30902], [-0.80902, 0.30902, -0.5]],
          | [[0.30902, -0.5, -0.80902], [-0.5, -0.80902, 0.30902], [-0.80902, 0.30902, -0.5]],
          | [[0.30902, -0.5, -0.80902], [0.5, 0.80902, -0.30902], [0.80902, -0.30902, 0.5]],
          | [[0.30902, -0.5, 0.80902], [-0.5, -0.80902, -0.30902], [0.80902, -0.30902, -0.5]],
          | [[0.30902, -0.5, 0.80902], [0.5, 0.80902, 0.30902], [-0.80902, 0.30902, 0.5]],
          | [[0.30902, 0.5, -0.80902], [-0.5, 0.80902, 0.30902], [0.80902, 0.30902, 0.5]],
          | [[0.30902, 0.5, -0.80902], [0.5, -0.80902, -0.30902], [-0.80902, -0.30902, -0.5]],
          | [[0.30902, 0.5, 0.80902], [-0.5, 0.80902, -0.30902], [-0.80902, -0.30902, 0.5]],
          | [[0.30902, 0.5, 0.80902], [0.5, -0.80902, 0.30902], [0.80902, 0.30902, -0.5]],
          | [[0.80902, -0.30902, -0.5], [-0.30902, 0.5, -0.80902], [0.5, 0.80902, 0.30902]],
          | [[0.80902, -0.30902, -0.5], [0.30902, -0.5, 0.80902], [-0.5, -0.80902, -0.30902]],
          | [[0.80902, -0.30902, 0.5], [-0.30902, 0.5, 0.80902], [-0.5, -0.80902, 0.30902]],
          | [[0.80902, -0.30902, 0.5], [0.30902, -0.5, -0.80902], [0.5, 0.80902, -0.30902]],
          | [[0.80902, 0.30902, -0.5], [-0.30902, -0.5, -0.80902], [-0.5, 0.80902, -0.30902]],
          | [[0.80902, 0.30902, -0.5], [0.30902, 0.5, 0.80902], [0.5, -0.80902, 0.30902]],
          | [[0.80902, 0.30902, 0.5], [-0.30902, -0.5, 0.80902], [0.5, -0.80902, -0.30902]],
          | [[0.80902, 0.30902, 0.5], [0.30902, 0.5, -0.80902], [-0.5, 0.80902, 0.30902]]]
          | """
    }
  }

  lazy val icosohedronMatrices: Seq[Array[Array[Double]]] = {
    new GsonBuilder().create.fromJson(new InputStreamReader(new ByteArrayInputStream(
      matrixData.stripMargin.getBytes("UTF-8")
    )), classOf[Array[Array[Array[Double]]]]
    ).toList
  }

  def multiply(point: Array[Double], transform: Array[Array[Double]]) = {
    unitV(Array(
      point(0) * transform(0)(0) + point(1) * transform(0)(1) + point(2) * transform(0)(2),
      point(0) * transform(1)(0) + point(1) * transform(1)(1) + point(2) * transform(1)(2),
      point(0) * transform(2)(0) + point(1) * transform(2)(1) + point(2) * transform(2)(2)
    ))
  }

  override def cartisianToAngularCoords(x: Double, y: Double, z: Double): (Double, Double) = {
    val tileCoords = icosohedronMatrices.map(multiply(Array(x, y, z), _)).minBy(dot(primaryTile, _))
    super.cartisianToAngularCoords(tileCoords(0), tileCoords(1), tileCoords(2))
  }

}
